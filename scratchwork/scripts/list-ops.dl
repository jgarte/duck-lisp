
(defun 1+ (value)
  (+ value 1))

(defun println (value)
  (print value)
  (print "\n")
  value)

(defun number-sequence (from to)
  (cons from (if (= from to)
				 ()
				 (self (1+ from) to))))

(defun not (value) (not value))
(defun car (value) (car value))
(defun + (a b) (+ a b))
(defun * (a b) (* a b))
(defun / (a b) (/ a b))

(defun add (value list)
  (cons value list))

(defun remove-if (fun list)
  (unless (null? list)
	  (if (fun (car list))
		  (self fun (cdr list))
		  (cons (car list)
				(self fun (cdr list))))))

(defun compose (f1 f2)
  (lambda (value) (f1 (f2 value))))

(defun remove-if-not (fun list)
  (remove-if (compose not fun) list))

(defun contains (value list)
  (car (remove-if-not (lambda (element) (= element value)) list)))

(defun maplist (fun list)
  (if (null? list)
	  ()
	  (cons (fun list) (self fun (cdr list)))))

(defun mapcar (fun list)
  (maplist (compose fun car) list))

(defun unary (fun value)
  (lambda (v) (fun value v)))

(defun times-table (n)
  (var seq (number-sequence 1 n))
  (println "")
  (println " * |")
  (print " --+-")
  (mapcar (lambda (element)
			(print "----"))
		  seq)
  (print "\n")
  (mapcar (lambda (list)
			(print "   | ")
			(mapcar (lambda (element)
					  (print (if (> element 9)
								 (if (> element 99)
									 ""
									 " ")
								 "  "))
					  (print element)
					  (print " "))
					list)
			(print "\n"))
		  (mapcar (lambda (fun)
					(mapcar fun seq))
				  (mapcar (lambda (x)
							(lambda (y)
							  (* x y)))
						  seq))))
(print-stack)
(times-table 20)
