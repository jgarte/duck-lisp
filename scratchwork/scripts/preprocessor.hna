(include "../scripts/library.hna")


(bvar *eof* -1)

(bdefun get-file-contents (file)
        (defun eof? (char)
          (= char *eof*))
        (var char-list ())
        (var finished false)
        (until finished
               (var char (fgetc file))
               (setq finished (eof? char))
               (when (not finished)
                 (push char char-list)))
        (make-string (nreverse char-list)))

bvar declarations "
__declare defmacro (L L &rest 1 I)
__declare var (L I)
__declare read (I I)
__declare string I
__declare cdr (I)
__declare ast I
__declare setq (L I)
__declare car (I)
__declare if (I I I)
__declare error I
__declare list (&rest -1 I)
__declare quote (I)
__declare read! (I)
__declare print (I)
"

(bdefun print-ast (ast)
        (defun print-ast (ast in-list? list-head?)
          (switch type-of ast
                  duckLisp-object-type-bool
                  print ast
                  duckLisp-object-type-int
                  print ast
                  duckLisp-object-type-float
                  print ast
                  duckLisp-object-type-str
                  (()
                   (var string-list
                        (mapcar (lambda (character)
                                  (switch character
                                          (get-vector-element "\n" 0) "\\n"
                                          (get-vector-element "\"" 0) "\\\""
                                          character))
                                ast))
                   var new-string-list ()
                   (while string-list
                     var element (pop string-list)
                     (if string? element
                         (while not null? element
                                (push (pop element) new-string-list))
                         (push element new-string-list)))
                   (setq ast (make-string (reverse new-string-list)))
                   print (concatenate "\"" ast "\""))
                  duckLisp-object-type-symbol
                  print symbol-string ast
                  duckLisp-object-type-list
                  (()
                   (if in-list?
                       (()
                        (when ast
                          (unless list-head?
                            print " ")
                          self car ast false false
                          self cdr ast true false))
                       (()
                        print "("
                        (when ast
                          self car ast false false
                          self cdr ast true false)
                        print ")")))
                  (println ' OTHER))
          ())
        (print-ast ast false false)
        (println)
        ())

(comptime
 var ast ()
 (()
  var source ""
  (()
   var f (open-file "../scripts/read.hna" "r")
   setq source get-file-contents f
   ;; (close-file f)
   )
  garbage-collect
  setq ast (read (concatenate "(() " declarations " " source ")") true))
 var error cdr ast
 setq ast car ast
 (when error
   println "Failed to read source")
 garbage-collect
 (print-ast ast)
 ())
