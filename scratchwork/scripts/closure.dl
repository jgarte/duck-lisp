
(defun println (x)
  (print x)
  (print "\n"))

(defun or (a b)
  (if a
	  true
	  (if b
		  true
		  false)))

(defun ptest (expected actual)
  (print expected)
  (if (or (> expected 9) (< expected 0))
	  (print "|")
	  ())
  (println actual))

(comment Variables are numbered by scope.
		 All values should be printed in double.)
(println "Basic variable test")
(var x 1)
(ptest 1 x)

(println "Scope and shadowing test")
((println "{")
 (ptest 1 x)
 (var x 2)
 (ptest 2 x)
 (println "}"))
(ptest 1 x)

(println "Function scope and shadowing test")
(defun print-x (x)
  (println "{")
  (ptest 1 x)
  (comment This works?!? I'm pretty sure this should be an error.)
  (var x 2)
  (ptest 2 x)
  (println "}"))
(print-x x)

(println "Free variable test")
((var y 3)
 (defun dummy () x y)
 (defun print-free-x ()
   (println "{")
   (ptest 1 x)
   (ptest 3 y)
   (println "}"))
 (print-free-x))

(println "Capture test")
(
 (var z 0)
 (
  (var y 7)
  (defun closure () y)
  (← z closure))
 (ptest 7 (z)))

(println "Closure factory")
(println "{")
(
 (defun closure-factory (x)
   (cons ((defun closure-read ()
			x))
		 ((defun closure-set (v)
			(setq x v)))))
 (var q (closure-factory 5))
 (var r (closure-factory 9))
 (ptest 5 (funcall (car q)))
 (ptest 9 (funcall (car r)))
 (funcall (cdr q) 4)
 (funcall (cdr r) 10)
 (ptest 4 (funcall (car q)))
 (ptest 10 (funcall (car r))))
(println "}")

(println "Fixed point combinator")
(println "{")
(defun factorial-fixed-point (f x)
  (if (= x 1)
	  1
	  (* x (f (- x 1)))))
(defun fixed-point (f x)
  (funcall ((defun dummy (x)
			  (f self x)))
		   x))
(ptest 120 (fixed-point factorial-fixed-point 5))
(println "}")

(println "Recursion")
(println "{")
(defun factorial-recursion (x)
  (if (= x 1)
	  1
	  (* x (self (- x 1)))))
(ptest 720 (factorial-recursion 6))
(println "}")

(println "Deeply nested closure")
(println "{")
(var o 5)
(defun s1 ()
  (defun s2 ()
	(defun s3 ()
	  (setq o -5))))
(defun g1 ()
  (defun g2 ()
	(defun g3 ()
	  o)))
(ptest 5 (funcall (funcall (g1))))
(ptest -5 (funcall (funcall (s1))))
(ptest -5 (funcall (funcall (g1))))
(println "}")
