
(__defun println (x)
         (print x)
         (print "\n"))

(__defun or (a b)
         (__if a
	           true
	           (__if b
		             true
		             false)))

(__defun ptest (expected actual)
         (print expected)
         (__if (or (__> expected 9) (__< expected 0))
	           (print "|")
	           ())
         (println actual))

;; Variables are numbered by scope.
;; All values should be printed in double.
(println "Basic variable test")
(__var x 1)
(ptest 1 x)

(println "Scope and shadowing test")
((println "{")
 (ptest 1 x)
 (__var x 2)
 (ptest 2 x)
 (println "}"))
(ptest 1 x)

(println "Function scope and shadowing test")
(__defun print-x (x)
         (println "{")
         (ptest 1 x)
         ;; This works?!? I'm pretty sure this should be an error.
         (__var x 2)
         (ptest 2 x)
         (println "}"))
(print-x x)

(println "Free variable test")
((__var y 3)
 (__defun dummy () x y)
 (__defun print-free-x ()
          (println "{")
          (ptest 1 x)
          (ptest 3 y)
          (println "}"))
 (print-free-x))

(println "Capture test")
(
 (__var z 0)
 (
  (__var y 7)
  (__defun closure () y)
  (__setq z closure))
 (ptest 7 (__funcall z)))

(println "Closure factory")
(println "{")
(
 (__defun closure-factory (x)
          (__cons ((__defun closure-read ()
    		                x))
    	          ((__defun closure-set (v)
    		                (__setq x v)))))
 (__var q (closure-factory 5))
 (__var r (closure-factory 9))
 (ptest 5 (__funcall (__car q)))
 (ptest 9 (__funcall (__car r)))
 (__funcall (__cdr q) 4)
 (__funcall (__cdr r) 10)
 (ptest 4 (__funcall (__car q)))
 (ptest 10 (__funcall (__car r))))
(println "}")

(println "Fixed point combinator")
(println "{")
(__defun factorial-fixed-point (f x)
         (__if (__= x 1)
	           1
	           (__* x (__funcall f (__- x 1)))))
(__defun fixed-point (f x)
         (__funcall ((__defun dummy (x)
			                  (__funcall f self x)))
		            x))
(ptest 120 (fixed-point factorial-fixed-point 5))
(println "}")

(println "Recursion")
(println "{")
(__defun factorial-recursion (x)
         (__if (__= x 1)
	           1
	           (__* x (self (__- x 1)))))
(ptest 720 (factorial-recursion 6))
(println "}")

(println "Deeply nested closure")
(println "{")
(__var o 5)
(__defun s1 ()
         (__defun s2 ()
	              (__defun s3 ()
	                       (__setq o -5))))
(__defun g1 ()
         (__defun g2 ()
	              (__defun g3 ()
	                       o)))
(ptest 5 (__funcall (__funcall (g1))))
(ptest -5 (__funcall (__funcall (s1))))
(ptest -5 (__funcall (__funcall (g1))))
(println "}")

(println "Lambda recursion")
(println "{")
(ptest 24 (__funcall (__lambda (x)
					           (__if (__= x 1)
						             1
						             (__* x (self (__- x 1)))))
				     4))
(println "}")
(println "Deeply nested lambda closure")
(println "{")
(__setq o 5)
(__var set (__lambda ()
		             (__lambda ()
			                   (__lambda ()
			                             (__setq o -5)))))
(__var get (__lambda ()
		             (__lambda ()
			                   (__lambda ()
			                             o))))
(ptest 5 (__funcall (__funcall (__funcall get))))
(ptest -5 (__funcall (__funcall (__funcall set))))
(ptest -5 (__funcall (__funcall (__funcall get))))
(println "}")
