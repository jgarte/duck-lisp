
(var statuses ())


(defun println (x)
  (print x)
  (print "\n"))

(defun or (a b)
  (if a
      true
      (if b
          true
          false)))

(defun ptest (expected actual)
  (setq statuses (cons (= expected actual) statuses))
  (print expected)
  (if (or (> expected 9) (< expected 0))
      (print "|")
      ())
  (println actual))

;; Variables are numbered by scope.
;; All values should be printed in double.
(println "Basic variable test")
(var x 1)
(ptest 1 x)

(println "Scope and shadowing test")
((println "{")
 (ptest 1 x)
 (var x 2)
 (ptest 2 x)
 (println "}"))
(ptest 1 x)

(println "Function scope and shadowing test")
(defun print-x (x)
  (println "{")
  (ptest 1 x)
  ;; This works?!? I'm pretty sure this should be an error.
  (var x 2)
  (ptest 2 x)
  (println "}"))
(print-x x)

(println "Free variable test")
((var y 3)
 (defun dummy () x y)
 (defun print-free-x ()
   (println "{")
   (ptest 1 x)
   (ptest 3 y)
   (println "}"))
 (print-free-x))

(println "Capture test")
(
 (var z 0)
 (
  (var y 7)
  (defun closure () y)
  (setq z closure))
 (ptest 7 (funcall z)))

(println "Closure factory")
(println "{")
(
 (defun closure-factory (x)
   (cons ((defun closure-read ()
            x))
         ((defun closure-set (v)
            (setq x v)))))
 (var q (closure-factory 5))
 (var r (closure-factory 9))
 (ptest 5 (funcall (car q)))
 (ptest 9 (funcall (car r)))
 (funcall (cdr q) 4)
 (funcall (cdr r) 10)
 (ptest 4 (funcall (car q)))
 (ptest 10 (funcall (car r))))
(println "}")

(println "Fixed point combinator")
(println "{")
(defun factorial-fixed-point (f x)
  (if (= x 1)
      1
      (* x (funcall f (- x 1)))))
(defun fixed-point (f x)
  (funcall ((defun dummy (x)
              (funcall f self x)))
           x))
(ptest 120 (fixed-point factorial-fixed-point 5))
(println "}")

(println "Recursion")
(println "{")
(defun factorial-recursion (x)
  (if (= x 1)
      1
      (* x (self (- x 1)))))
(ptest 720 (factorial-recursion 6))
(println "}")

(println "Deeply nested closure")
(println "{")
(var o 5)
(defun s1 ()
  (defun s2 ()
    (defun s3 ()
      (setq o -5))))
(defun g1 ()
  (defun g2 ()
    (defun g3 ()
      o)))
(ptest 5 (funcall (funcall (g1))))
(ptest -5 (funcall (funcall (s1))))
(ptest -5 (funcall (funcall (g1))))
(println "}")

(println "Lambda recursion")
(println "{")
(ptest 24 (funcall (lambda (x)
                     (if (= x 1)
                         1
                         (* x (self (- x 1)))))
                   4))
(println "}")
(println "Deeply nested lambda closure")
(println "{")
(setq o 5)
(var set (lambda ()
           (lambda ()
             (lambda ()
               (setq o -5)))))
(var get (lambda ()
           (lambda ()
             (lambda ()
               o))))
(ptest 5 (funcall (funcall (funcall get))))
(ptest -5 (funcall (funcall (funcall set))))
(ptest -5 (funcall (funcall (funcall get))))
(println "}")


(var status "pass")
(while statuses
       (unless (car statuses)
         (setq status "FAIL"))
       (setq statuses (cdr statuses)))
(println status)

