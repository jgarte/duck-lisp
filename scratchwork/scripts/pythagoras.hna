(include "../scripts/library.hna")

var stack ()

var sqrt-lut (list cons   0  0
                   cons   1  1
                   cons   4  2
                   cons   9  3
                   cons  16  4
                   cons  25  5
                   cons  36  6
                   cons  49  7
                   cons  64  8
                   cons  81  9
                   cons 100 10
                   cons 121 11
                   cons 144 12
                   cons 169 13
                   cons 196 14
                   cons 225 15
                   cons 256 16
                   cons 289 17
                   cons 324 18
                   cons 361 19
                   cons 400 20)
(defun sqrt ()
  var lut sqrt-lut
  var value (pop stack)
  var result nil
  (dotimes i length sqrt-lut
           var entry pop lut
           (when = value (car entry)
                 setq result cdr entry))
  push result stack)

defun dup () push car stack stack
defun swap () setq stack cons cadr stack cons car stack cddr stack
defun dig2 () setq stack cons caddr stack cons cadr stack cons car stack cdddr stack
defun drop () pop stack

defun + () push + pop stack pop stack stack
defun * () push * pop stack pop stack stack
defun push n push n stack
defmacro quote (&rest body) (&rest -1 I) ` push lambda () ,@ body stack
defun apply () (funcall (pop stack))

(defun print-stack ()
  var stack reverse stack
  var value ()
  (while (setq value (pop stack))
    print (if closure? value
              "CLOSURE"
              value)
    print " ")
  (println))

(defun print ()
  var value pop stack
  println (if closure? value
              "CLOSURE"
              value))

(quote
 dup
 *
 swap
 dup
 *
 +
 sqrt)
dup

push 3 push 4
dig2 apply
print

push 5 push 12
dig2 apply
print
