(include "../scripts/library.hna")
__defmacro declare (identifier type &rest script-body) ()
(__declare declare (L L &rest 0 I)
           (__declare-identifier (__infer-and-get-next-argument) (__infer-and-get-next-argument)))

bdefun + (a &rest 1 b)
       if b
          __+ a (apply #self b)
          a

bdefun * (a &rest 1 b)
       if b
          (__* a (apply #self b))
          a

bdefun list (&rest 0 args) args

bdefun map (f l)
       if l
          cons (#f car l)
               self f (cdr l)
          ()

bdefun reduce (f l) apply f l

println ' #print
println + + 1 2
          + 3 4
println (+ 1 2 3 4)
println * 2 reduce #+ (list 1 2 3 4)
println reduce #+ map lambda (x) * 2 x (list 1 2 3 4)

bdefun f (a b) (cons a b)
bdefun g (a b) (cons a b)
declare g (L I)

println f list 3
println g list 3
println (f list 3)
println (g list 3)
println #f list 3
println #g list 3
println (#f list 3)
println (#g list 3)
println #(f list 3)
println #(g list 3)
println ""
println f (list list 3) 3
println g (list list 3) 3
println (f (list list 3) 3)
println (g (list list 3) 3)
println (#f (list list 3) 3)
println (#g (list list 3) 3)
println #(f (list list 3) 3)
println #(g (list list 3) 3)

var      x       "Llama comma"  println x
bdefun   x ()    "Llama comma"  println x
defmacro x () () "Llama comma"  println x

bdefun f (&rest -1 a) a
println (f 1 2 3)

__var z lambda () 4
declare z L
print (z)

__defmacro w (x &rest y) cons x y
println w 4
