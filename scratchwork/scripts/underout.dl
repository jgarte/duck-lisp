(include "../scripts/library.dl")

(comment Under-Out
		 `new-deck' generates a new deck of cards.
		 `pseudo-shuffle' shoves a specified number of cards under the deck and then places the top card on a new deck.
		 `find-cycles' determines which cards move where during a shuffle.
		 `calculate-identity-shuffle' calculates how many times the deck must be shuffled to place it back in its original state.)

(defun new-deck (size)
  (print "* <new-deck ") (print size) (println ">")
  (var i 0)
  (var deck ())
  (while (< i size)
	(setq deck (cons (- (- size i) 1) deck))
	(setq i (1+ i)))
  deck)

(defun last (list)
  (while (not (null? (cdr list)))
	(setq list (cdr list)))
  list)

(defun pseudo-shuffle (deck unders-count)  
  (print "* <pseudo-shuffle ") (print (quote deck)) (print unders-count) (println ">")
  (var new-deck ())
  (var i 0)
  (var last-cons (last deck))
  (while (and (atom? (car deck))
			  (not (null? (car deck))))
	(setq i 0)
	(while (< i unders-count)
	  (var next-last-cons (cons (car deck) ()))
	  (set-cdr last-cons next-last-cons)
	  (setq last-cons next-last-cons)
	  (setq deck (cdr deck))
	  (setq i (1+ i)))
	(setq new-deck (cons (car deck) new-deck))
	(setq deck (cdr deck)))
  new-deck)

(defun find-cycles (deck unders-count)
  (print "* <find-cycles ") (print (quote deck)) (print unders-count) (println ">")
  (println "Shuffling deck…")
  (var shuffled-deck (pseudo-shuffle (copy-list deck) unders-count))
  (var scratch-shuffled-deck (copy-list shuffled-deck))
  (println "Starting analysis:")
  (var cycles ())
  (var cycle-number 0)
  (var deck-length (length deck))
  (var search-area scratch-shuffled-deck)
  (while (not (null? search-area))
	(comment " Find the next element that has not been touched. This is the start of the next loop. ")
	(while (and (not (null? search-area))
				(null? (car search-area)))
	  (setq search-area (cdr search-area)))
	(if (not (null? search-area))
		(
		 (println "  Found cycle.")
		 (setq cycles (cons () cycles))
		 (var cycle (first cycles))
		 (var endcard (car search-area))
		 (setq cycle (cons endcard cycle))
		 (set-car search-area ())
		 (comment " Trace the cycle. ")
		 (println "  Tracing cycle…")
		 (var next-position-cons (nthcdr (first cycle) scratch-shuffled-deck))
		 (var next-position (car next-position-cons))
		 (while (not (null? next-position))
		   (set-car next-position-cons ())
		   (setq cycle (cons next-position cycle))
		   (setq next-position-cons (nthcdr (first cycle) scratch-shuffled-deck))
		   (setq next-position (car next-position-cons)))
		 (comment " Move to the next cycle. ")
		 (println "    Finished trace.")
		 (setq cycles (cons cycle (cdr cycles)))
		 (setq cycle-number (1+ cycle-number))
		 (setq search-area (cdr search-area)))
		(
		 ())))
  (println "  Done.")
  (cons shuffled-deck (cons cycles (cons cycle-number ()))))

(defun calculate-identity-shuffle (cycles)
  (print "* <calculate-identity-shuffle ") (print (quote cycles)) (println ">")
  (println "Collecting cycle lengths…")
  (var lengths ())
  (var cycle ())
  (while (not (null? cycles))
	(setq cycle (car cycles))
	(setq lengths (cons (length cycle) lengths))
	(setq cycles (cdr cycles)))
  (var len ())
  (comment " Initialize `total` with a safe value that will not effect the rest of the calculation. ")
  (println "Calculating LCM…")
  (var total (car lengths))
  (while (not (null? lengths))
	(setq len (car lengths))
	(setq total (lcm len total))
	(setq lengths (cdr lengths)))
  total)

(defun main (deck-size)
  (var deck (new-deck deck-size))
  (var cycles (find-cycles deck 1))
  (var identity-shuffles (calculate-identity-shuffle (cadr cycles)))

  (print "\n")
  (print "\nOriginal deck ․․․․․․ ") (println deck)
  (print "\nShuffled deck ․․․․․․ ") (println (car cycles))
  (print "\nCycles ․․․․․․․․․․․․․ ") (println (cadr cycles))
  (print "\nNumber of cycles ․․․ ") (println (caddr cycles))
  (print "\nIdentity shuffles ․․ ") (println identity-shuffles))
