(__comptime (print "<comptime underout.dl>\n"))
(print "<underout.dl>\n")
(include "../scripts/library.dl")

;; Under-Out
;; `new-deck' generates a new deck of cards.
;; `pseudo-shuffle' shoves a specified number of cards under the deck and then places the top card on a new deck.
;; `find-cycles' determines which cards move where during a shuffle.
;; `calculate-identity-shuffle' calculates how many times the deck must be shuffled to place it back in its original
;; state.

(defun new-deck (size)
  (print "* <new-deck ") (print size) (println ">")
  (var deck ())
  (dotimes i size
           (push (- (- size i) 1) deck))
  deck)

(defun pseudo-shuffle (deck unders-count)  
  (print "* <pseudo-shuffle ") (print (quote deck)) (print unders-count) (println ">")
  (var new-deck ())
  (var last-cons (last deck))
  (while (and (atom? (car deck))
			  (not (null? (car deck))))
	(dotimes i unders-count
	  (var next-last-cons (cons (car deck) ()))
	  (set-cdr last-cons next-last-cons)
	  (setq last-cons next-last-cons)
	  (pop deck))
    (push (pop deck) new-deck))
  new-deck)

(defun find-cycles (deck unders-count)
  (print "* <find-cycles ") (print (quote deck)) (print unders-count) (println ">")
  (println "Shuffling deck…")
  (var shuffled-deck (pseudo-shuffle (copy-list deck) unders-count))
  (var scratch-shuffled-deck (copy-list shuffled-deck))
  (println "Starting analysis:")
  (var cycles ())
  (var cycle-number 0)
  (var deck-length (length deck))
  (var search-area scratch-shuffled-deck)
  (while search-area
	;; Find the next element that has not been touched. This is the start of the next loop.
	(while (and search-area
				(null? (car search-area)))
      (pop search-area))
	(when search-area
	  (
	   (println "  Found cycle.")
	   (setq cycles (cons () cycles))
	   (var cycle (first cycles))
	   (var endcard (car search-area))
	   (setq cycle (cons endcard cycle))
	   (set-car search-area ())
	   ;; Trace the cycle.
	   (println "  Tracing cycle…")
	   (var next-position-cons (nthcdr (first cycle) scratch-shuffled-deck))
	   (var next-position (car next-position-cons))
	   (while (not (null? next-position))
		 (set-car next-position-cons ())
		 (setq cycle (cons next-position cycle))
		 (setq next-position-cons (nthcdr (first cycle) scratch-shuffled-deck))
		 (setq next-position (car next-position-cons)))
	   ;; Move to the next cycle.
	   (println "    Finished trace.")
	   (setq cycles (cons cycle (cdr cycles)))
	   (to cycle-number (1+))
       (pop search-area))))
  (println "  Done.")
  (cons shuffled-deck (cons cycles (cons cycle-number ()))))

(defun calculate-identity-shuffle (cycles)
  (print "* <calculate-identity-shuffle ") (print (quote cycles)) (println ">")
  (println "Collecting cycle lengths…")
  (var lengths ())
  (dolist cycle cycles
	      (setq lengths (cons (length cycle) lengths)))
  ;; Initialize `total` with a safe value that will not effect the rest of the calculation.
  (println "Calculating LCM…")
  (var total (first lengths))
  (dolist length lengths
	      (setq total (lcm length total)))
  total)

(defun main (deck-size)
  (var deck (new-deck deck-size))
  (var cycles (find-cycles deck 1))
  (var identity-shuffles (calculate-identity-shuffle (second cycles)))

  (println "")
  (println "\nOriginal deck ․․․․․․ " deck)
  (println "\nShuffled deck ․․․․․․ " (first cycles))
  (println "\nCycles ․․․․․․․․․․․․․ " (second cycles))
  (println "\nNumber of cycles ․․․ " (third cycles))
  (println "\nIdentity shuffles ․․ " identity-shuffles))

(comptime (print "</comptime underout.dl>\n"))
(print "</underout.dl>\n")
