(print "{\n")



(print (make-type)) (print "\n")
(print (make-type)) (print "\n")
(var my-type (make-type))
(print my-type) (print "\n")
(var my-object (make-instance my-type 5 (lambda () ())))
(print my-object) (print "\n")

(print (type-of my-object)) (print "\n")
(print (composite-value my-object)) (print "\n")
(print (composite-function my-object)) (print "\n")

(set-composite-value my-object (quote value))
(set-composite-function my-object (quote function))
(print my-object) (print "\n")

(set-composite-function my-object (lambda (a b c)
                                    (print a)
                                    (print " ")
                                    (print b)
                                    (print " ")
                                    (print c)
                                    (print "\n")))
(funcall my-object 1 2 3)
(funcall my-object 4 5 6)
(apply my-object (list 7 8 9))

(set-composite-function my-object (lambda (a b c)
                                    (print a)
                                    (print " ")
                                    (print b)
                                    (print " ")
                                    (print c)
                                    (print "\n")))

(var outer-object (make-instance (make-type) (quote outer-value) my-object))
(funcall outer-object 1 2 3)
(funcall outer-object 4 5 6)
(apply outer-object (list 7 8 9))

(print "}\n")
