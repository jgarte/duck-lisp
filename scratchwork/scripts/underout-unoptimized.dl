(include ../scripts/library.dl)

(comment Under-Out
		 `new-deck' generates a new deck of cards.
		 `pseudo-shuffle' shoves a specified number of cards under the deck and then places the top card on a new deck.
		 `find-cycles' determines which cards move where during a shuffle.
		 `calculate-identity-shuffle' calculates how many times the deck must be shuffled to place it back in its original state.)

(defun new-deck (size)
  (var i 0)
  (var deck ())
  (while (< i size)
		 (setq deck (cons (- (- size i) 1) deck))
		 (setq i (1+ i)))
  deck)

(defun pseudo-shuffle (deck unders-count)
  (var new-deck ())
  (var i 0)
  (while (atom? (car deck))
		 (setq i 0)
		 (while (< i unders-count)
				(setq deck (nreverse (cons (car deck) (nreverse (cdr deck)))))
				(setq i (1+ i)))
		 (setq new-deck (cons (car deck) new-deck))
		 (setq deck (cdr deck)))
  new-deck)

(defun find-cycles (deck unders-count)
  (var shuffled-deck (pseudo-shuffle (copy-list deck) unders-count))
  (var cycles ())
  (var cycle-number 0)
  (var found ())
  (var i 0)
  (while (< i (length deck))
		 (while (and (< i (length deck))
					 (member (elt shuffled-deck i) found))
				(setq i (1+ i)))
		 (if (< i (length deck))
			 (
			  (setq cycles (cons () cycles))
			  (var cycle (first cycles))
			  (var endcard (elt shuffled-deck i))
			  (setq cycle (cons endcard cycle))
			  (setq found (cons endcard found))
			  (while (not (= endcard
							 (elt shuffled-deck (first cycle))))
					 (setq found (cons (elt shuffled-deck (first cycle)) found))
					 (setq cycle (cons (elt shuffled-deck (first cycle)) cycle)))
			  (setq cycles (cons cycle (cdr cycles)))
			  (setq cycle-number (1+ cycle-number))
			  (setq i (1+ i)))
			 (
			  ())))
  (cons shuffled-deck (cons cycles (cons cycle-number ()))))

(defun calculate-identity-shuffle (cycles)
  (var lengths ())
  (var cycle ())
  (while (not (null? cycles))
		 (setq cycle (car cycles))
		 (setq lengths (cons (length cycle) lengths))
		 (setq cycles (cdr cycles)))
  (var len ())
  (var total (car lengths))
  (while (not (null? lengths))
		 (setq len (car lengths))
		 (setq total (lcm len total))
		 (setq lengths (cdr lengths)))
  total)

(var deck (new-deck 52))
(var cycles (find-cycles deck 1))
(var identity-shuffles (calculate-identity-shuffle (cadr cycles)))

(println identity-shuffles)

