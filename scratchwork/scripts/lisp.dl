;;; The metacircular evaluator
;;;
;;; Adapted from Paul Graham's essay Roots of Lisp, which can be found at
;;; "http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf"

(include "../scripts/library.dl")

(defun eval () ())

(defun test ()
  (eval 4 5))

(defun evcon (c a)
  (if (eval (caar c) a)
	  (eval (cadar c) a)
	  (self (cdr c) a)))

(defun evlis (m a)
  (if (null? m)
	  ()
	  (cons (eval (car m) a)
			(self (cdr m) a))))

(setq eval (lambda (e a)
			 (if (atom? e)
				 (assoc e a)
				 (if (atom? (car e))
					 (if (= (car e) (quote quote))
						 (cadr e)
						 (if (= (car e) (quote atom))
							 (atom? (self (cadr e) a))
							 (if (= (car e) (quote eq))
								 (= (self (cadr e) a)
									(self (caddr e) a))
								 (if (= (car e) (quote car))
									 (car (self (cadr e) a))
									 (if (= (car e) (quote cdr))
										 (cdr (self (cadr e) a))
										 (if (= (car e) (quote cons))
											 (cons (self (cadr e) a)
												   (self (caddr e) a))
											 (if (= (car e) (quote cond))
												 (evcon (cdr e) a)
												 (self (cons (assoc (car e) a)
															 (cdr e))
													   a))))))))
					 (if (= (caar e) (quote label))
						 (self (cons (caddar e) (cdr e))
							   (cons (cons (cadar e) (cons (car e) ())) a))
						 (if (= (caar e) (quote lambda))
							 (self (caddar e)
								   (append (pair (cadar e) (evlis (cdr e) a))
										   a))
							 ()))))))
