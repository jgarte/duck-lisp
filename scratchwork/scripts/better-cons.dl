

(defun list? (v)
  (var duckLisp-object-type-closure 8)
  (= (type-of v) duckLisp-object-type-closure))

(defun cons (car cdr)
  (lambda (selector)
	(funcall selector
             car
             cdr
             (lambda (v)
               (setq car v)
               v)
             (lambda (v)
               (setq cdr v)
               v))))

(defun car (cons)
  (if (list? cons)
	  (if (null? cons)
		  ()
		  (cons (lambda (car cdr set-car set-cdr)
				  car)))
	  ()))

(defun cdr (cons)
  (if (list? cons)
	  (if (null? cons)
		  ()
		  (cons (lambda (car cdr set-car set-cdr)
				  cdr)))
	  ()))

(defun set-car (cons v)
  (cons (lambda (car cdr set-car set-cdr)
		  (funcall set-car v))))

(defun set-cdr (cons v)
  (cons (lambda (car cdr set-car set-cdr)
		  (funcall set-cdr v))))

(include "../scripts/library.dl")

(defun print-list (list)
  (print "< ")
  (while (not (null? list))
		 (print (car list))
		 (print " ")
		 (setq list (cdr list)))
  (print ">")
  ())

(defun println-list (list)
  (print-list list)
  (print "\n")
  ())
