
(defun 1+ (a)
  (+ a 1))

(defun 1- (a)
  (- a 1))

(defun * (a b)
  (var acc 0)

  (var i 0)
  (label multiply-loop)

  (brnz (not (< i b)) multiply-end)
  (
   (← acc (+ acc a))
   
   (← i (+ i 1)))
  (goto multiply-loop)
  (label multiply-end)
  acc)

(defun factorial-helper (n acc)
  (brnz (= n 1) exit)
  (setq acc (factorial-helper (1- n) (* n acc)))

  (label exit)
  acc)



(defun factorial (n)
  (factorial-helper n 1))

(var x 5)
(var y (factorial x))
(print y)
